import os
import shutil
import cv2
import numpy as np
from PIL import Image, ImageTk
from ultralytics import YOLO
import tkinter as tk
from tkinter import messagebox, filedialog  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –¥–ª—è messagebox –∏ filedialog


def safe_image_open(path):
    try:
        img = cv2.imdecode(np.fromfile(path, dtype=np.uint8), cv2.IMREAD_COLOR)
        if img is not None:
            return img
        with Image.open(path) as pil_img:
            return cv2.cvtColor(np.array(pil_img), cv2.COLOR_RGB2BGR)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è {path}: {str(e)}")
        return None


def detect_faces(image_path):
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ YOLOv11 (–∏–ª–∏ –¥—Ä—É–≥–æ–π –≤–µ—Ä—Å–∏–∏)
        model = YOLO("yolov11n-face.pt")  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –º–æ–¥–µ–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        results = model(image_path)  # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ

        faces = []
        confidence_threshold = 0.3  # –ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        for result in results:
            boxes = result.boxes.cpu().numpy()  # –ü–æ–ª—É—á–∞–µ–º bounding boxes
            for box in boxes:
                if box.conf[0] > confidence_threshold:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
                    x1, y1, x2, y2 = map(int, box.xyxy[0])  # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
                    w, h = x2 - x1, y2 - y1
                    faces.append([x1, y1, w, h])

        return np.array(faces) if len(faces) > 0 else np.empty((0, 4))
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏: {str(e)}")
        return np.empty((0, 4))  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ


def crop_to_passport(image_path, output_path, face_coords):
    try:
        img = Image.open(image_path)
        x, y, w, h = face_coords

        target_w, target_h = 412, 531
        target_ratio = target_w / target_h

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±–ª–∞—Å—Ç—å –æ–±—Ä–µ–∑–∫–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
        crop_height = int(h * 1.4)  # –ì–æ–ª–æ–≤–∞ + –ø–ª–µ—á–∏
        crop_width = int(crop_height * target_ratio)

        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º
        x_center = x + w // 2
        y_center = y + h // 2

        x1 = max(0, x_center - crop_width // 2)
        y1 = max(0, y_center - h // 2 - int(h * 0.1))  # 10% —Å–≤–µ—Ä—Ö—É
        x2 = min(img.width, x1 + crop_width)
        y2 = min(img.height, y1 + crop_height)

        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –µ—Å–ª–∏ –≤—ã—à–ª–∏ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã
        if x2 - x1 < crop_width:
            x1 = max(0, x2 - crop_width)
        if y2 - y1 < crop_height:
            y1 = max(0, y2 - crop_height)

        print(f"‚úÇÔ∏è –û–±—Ä–µ–∑–∫–∞ –æ–±–ª–∞—Å—Ç–∏: ({x1}, {y1}, {x2}, {y2})")

        cropped = img.crop((x1, y1, x2, y2))
        cropped = cropped.resize((target_w, target_h), Image.Resampling.LANCZOS)
        cropped.save(output_path, quality=95)

    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–µ–∑–∫–∏: {str(e)}")
        shutil.copy2(image_path, output_path)


def process_folder(src_dir, dst_dir):
    for root, _, files in os.walk(src_dir):
        rel_path = os.path.relpath(root, src_dir)
        dst_path = os.path.join(dst_dir, rel_path)
        os.makedirs(dst_path, exist_ok=True)

        for file in [f for f in files if f.lower().endswith(('.jpg', '.jpeg', '.png'))]:
            src_file = os.path.join(root, file)
            dst_file = os.path.join(dst_path, file)

            if os.path.exists(dst_file):
                print(f"‚ö†Ô∏è –§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {dst_file}")
                continue

            faces = detect_faces(src_file)
            print(f"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ª–∏—Ü: {len(faces)} –¥–ª—è —Ñ–∞–π–ª–∞: {src_file}")

            if len(faces) > 0:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –º–∞—Å—Å–∏–≤–∞
                print(f"‚úÇÔ∏è –û–±—Ä–µ–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {src_file}")
                try:
                    # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–µ–∑–∫–∞
                    crop_to_passport(src_file, dst_file, faces[0])  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–µ –ª–∏—Ü–æ
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–µ–∑–∫–∏: {str(e)}")
                    shutil.copy2(src_file, dst_file)
            else:
                print(f"‚ö†Ô∏è –õ–∏—Ü–æ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ, –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ: {src_file}")
                shutil.copy2(src_file, dst_file)


def create_gui():
    def start_processing():
        source = source_entry.get()
        output = output_entry.get()

        if not os.path.isdir(source):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ò—Å—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return

        if not os.path.isdir(output):
            os.makedirs(output, exist_ok=True)

        print("üîÑ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
        process_folder(source, output)
        print(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤: {output}")
        messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤: {output}")

    # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
    root = tk.Tk()
    root.title("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")

    # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –∏—Å—Ö–æ–¥–Ω–æ–π –ø–∞–ø–∫–∏
    tk.Label(root, text="–ò—Å—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞:").grid(row=0, column=0, padx=10, pady=5, sticky="w")
    source_entry = tk.Entry(root, width=50)
    source_entry.grid(row=0, column=1, padx=10, pady=5)
    source_entry.insert(0, r"–§–æ—Ç–æ")  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞–ø–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    tk.Label(root, text="–ü–∞–ø–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:").grid(row=1, column=0, padx=10, pady=5, sticky="w")
    output_entry = tk.Entry(root, width=50)
    output_entry.grid(row=1, column=1, padx=10, pady=5)
    output_entry.insert(0, r"–†–µ–∑—É–ª—å—Ç–∞—Ç")  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏—Å—Ö–æ–¥–Ω–æ–π –ø–∞–ø–∫–∏
    def select_source_folder():
        folder = filedialog.askdirectory()
        if folder:
            source_entry.delete(0, tk.END)
            source_entry.insert(0, folder)

    tk.Button(root, text="–í—ã–±—Ä–∞—Ç—å", command=select_source_folder).grid(row=0, column=2, padx=5, pady=5)

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    def select_output_folder():
        folder = filedialog.askdirectory()
        if folder:
            output_entry.delete(0, tk.END)
            output_entry.insert(0, folder)

    tk.Button(root, text="–í—ã–±—Ä–∞—Ç—å", command=select_output_folder).grid(row=1, column=2, padx=5, pady=5)

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    tk.Button(root, text="–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã", command=start_processing).grid(
        row=2, column=0, columnspan=3, pady=10
    )

    root.mainloop()


if __name__ == "__main__":
    create_gui()